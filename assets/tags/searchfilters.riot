<!-- All search filters that I kept from MusicBrainz API Documentation -->
<!-- props:
	belonging = current belonging
-->

<searchfilters>
    <h3 class="text-primary mt-4">
                <span data-toggle="collapse" href="#filters" style="cursor: pointer;" onclick="{ onFiltersShowChange }">
                    Filters
                    <svg if="{ !show }" data-toggle="collapse" href="#filters" class="bi bi-caret-down-fill" width="1em" height="1em" viewBox="0 0 16 16" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                        <path d="M7.247 11.14L2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 01.753 1.659l-4.796 5.48a1 1 0 01-1.506 0z"/>
                    </svg>
                    <svg if="{ show }" data-toggle="collapse" href="#filters" class="bi bi-caret-down-fill" width="1em" height="1em" viewBox="0 0 16 16" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                        <path d="M7.247 4.86l-4.796 5.481c-.566.647-.106 1.659.753 1.659h9.592a1 1 0 00.753-1.659l-4.796-5.48a1 1 0 00-1.506 0z"/>
                    </svg>
                </span>
    </h3>
    <div id="filters" class="container-fluid collapse">
        <div class="row mb-2">

            <div class="col-xs-12 col-sm-6 col-md-4 col-lg-4 col-xl-4 mb-2">
                <!-- Select for type -->
                <label for="type" class="text-primary">Type</label>
                <div class="input-group">
                    <select id="type" disabled="{ props.belonging === constants.RECORDING_BELONGING ? 'disabled' : '' }"
                            class="custom-select" name="type" onchange="{ onTypeChange }">

                        <!-- Both -->
                        <option value="{ constants.ALL_TYPE }">
                            All
                        </option>
                        <option value="{ constants.OTHER_TYPE }">
                            Other
                        </option>
                        <!-- Artists -->
                        <option if="{ props.belonging === constants.ARTIST_BELONGING }" value="{ constants.GROUP_TYPE }">
                            Group
                        </option>
                        <option if="{ props.belonging === constants.ARTIST_BELONGING }" value="{ constants.PERSON_TYPE }">
                            Person
                        </option>
                        <option if="{ props.belonging === constants.ARTIST_BELONGING }" value="{ constants.ORCHESTRA_TYPE }">
                            Orchestra
                        </option>
                        <option if="{ props.belonging === constants.ARTIST_BELONGING }" value="{ constants.CHOIR_TYPE }">
                            Choir
                        </option>
                        <option if="{ props.belonging === constants.ARTIST_BELONGING }" value="{ constants.CHARACTER_TYPE }">
                            Character
                        </option>
                        <!-- Albums -->
                        <option if="{ props.belonging === constants.RELEASE_GROUP_BELONGING }" value="{ constants.ALBUM_TYPE }">
                            Album
                        </option>
                        <option if="{ props.belonging === constants.RELEASE_GROUP_BELONGING }" value="{ constants.SINGLE_TYPE }">
                            Single
                        </option>
                        <option if="{ props.belonging === constants.RELEASE_GROUP_BELONGING }" value="{ constants.EP_TYPE }">
                            Extended Play
                        </option>
                        <option if="{ props.belonging === constants.RELEASE_GROUP_BELONGING }" value="{ constants.BROADCAST_TYPE }">
                            Broadcast
                        </option>
                    </select>
                    <div class="input-group-append">
                        <button type="button" class="btn btn-light" data-toggle="popover" data-placement="bottom" data-trigger="focus"
                                data-title="For artists and albums only" data-content="Precised type. Select &quot All &quot to not specify.">
                            ?
                        </button>
                    </div>
                </div>
            </div>

            <div class="col-xs-12 col-sm-6 col-md-4 col-lg-4 col-xl-4 mb-2">
                <!-- Input for author name -->
                <label for="author" class="text-primary">Author</label>
                <div class="input-group">
                    <input id="author" type="text" class="form-control" name="author" placeholder="Author"
                           disabled="{ props.belonging === constants.ARTIST_BELONGING ? 'disabled' : '' }">
                    <div class="input-group-append">
                        <button type="button" class="btn btn-light" data-toggle="popover" data-placement="bottom" data-trigger="focus"
                                data-title="For albums and songs only" data-content="Name of the authors. Leave empty to not specify.">
                            ?
                        </button>
                    </div>
                </div>
            </div>

            <div class="col-xs-12 col-sm-6 col-md-4 col-lg-4 col-xl-4 mb-2">
                <!-- Select for gender -->
                <label for="gender" class="text-primary">Gender</label>
                <div class="input-group">
                    <select id="gender" class="custom-select" name="gender"
                            disabled="{ props.belonging !== constants.ARTIST_BELONGING || (type !== constants.PERSON_TYPE && type !== constants.CHARACTER_TYPE) ? 'disabled' : '' }">

                        <option value="{ constants.NEITHER_GENDER }">
                            Neither
                        </option>
                        <option value="{ constants.MALE_GENDER }">
                            Male
                        </option>
                        <option value="{ constants.FEMALE_GENDER }">
                            Female
                        </option>
                    </select>
                    <div class="input-group-append">
                        <button type="button" class="btn btn-light" data-toggle="popover" data-placement="bottom" data-trigger="focus"
                                data-title="For artists who are a person or a character only" data-content="Gender of the person. Select &quot Neither &quot to not specify.">
                            ?
                        </button>
                    </div>
                </div>
            </div>

            <div class="col-xs-12 col-sm-6 col-md-4 col-lg-4 col-xl-4 mb-2">
                <!-- Input for artists associated area -->
                <label for="area" class="text-primary">Associated area</label>
                <div class="input-group">
                    <input disabled="{ props.belonging !== constants.ARTIST_BELONGING ? 'disabled' : '' }"
                           id="area" type="text" class="form-control" name="area" placeholder="Associated area">
                    <div class="input-group-append">
                        <button type="button" class="btn btn-light" data-toggle="popover" data-placement="bottom" data-trigger="focus"
                                data-title="For artists only" data-content="City, country, ..., associated to it. Leave empty to not specify.">
                            ?
                        </button>
                    </div>
                </div>
            </div>

            <div class="col-xs-12 col-sm-6 col-md-4 col-lg-4 col-xl-4 mb-2">
                <!-- Input for authors birth date -->
                <label for="begin" class="text-primary">Begin date</label>
                <div class="input-group">
                    <input disabled="{ type === constants.OTHER_TYPE || props.belonging !== constants.ARTIST_BELONGING ? 'disabled' : '' }"
                           id="begin" type="text" class="form-control" name="begin"
                           pattern="(([1-2][0-9][0-9][0-9])-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]))|(([1-2][0-9][0-9][0-9])-(0[1-9]|1[0-2]))|(([1-2][0-9][0-9][0-9]))"
                           data-toggle="popover" data-placement="bottom" data-trigger="focus"
                           data-content="yyyy-mm-dd or yyyy-mm or yyyy." placeholder="Begin date">
                    <div class="input-group-append">
                        <button type="button" class="btn btn-light" data-toggle="popover" data-placement="bottom" data-trigger="focus"
                                data-title="For artists only" data-content="Birth date for persons and characters, begin date for other types (including &quot All &quot type). Leave empty to not specify.">
                            ?
                        </button>
                    </div>
                </div>
            </div>

            <div class="col-xs-12 col-sm-6 col-md-4 col-lg-4 col-xl-4 mb-2">
                <!-- Input for authors death date -->
                <label for="end" class="text-primary">End date</label>
                <div class="input-group">
                    <input disabled="{ type === constants.OTHER_TYPE || props.belonging !== constants.ARTIST_BELONGING ? 'disabled' : '' }"
                           id="end" type="text" class="form-control" name="end"
                           pattern="(([1-2][0-9][0-9][0-9])-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]))|(([1-2][0-9][0-9][0-9])-(0[1-9]|1[0-2]))|(([1-2][0-9][0-9][0-9]))"
                           data-toggle="popover" data-placement="bottom" data-trigger="focus"
                           data-content="yyyy-mm-dd or yyyy-mm or yyyy." placeholder="End date">
                    <div class="input-group-append">
                        <button type="button" class="btn btn-light" data-toggle="popover" data-placement="bottom" data-trigger="focus"
                                data-title="For artists only" data-content="Death date for persons and characters, end date for other types (including &quot All &quot type). Leave empty to not specify.">
                            ?
                        </button>
                    </div>
                </div>
            </div>

            <div class="col-xs-12 col-sm-6 col-md-4 col-lg-4 col-xl-4 mb-2">
                <!-- Input for amount of results -->
                <label for="count" class="text-primary">Maximum per pages</label>
                <div class="input-group">
                    <select id="count" class="custom-select" name="count" required="required">
                        <option value="10">10</option>
                        <option value="20">20</option>
                        <option value="25">25</option>
                        <option value="30">30</option>
                        <option value="40">40</option>
                        <option value="50">50</option>
                        <option value="60">60</option>
                        <option value="70">70</option>
                        <option value="75">75</option>
                        <option value="80">80</option>
                        <option value="90">90</option>
                        <option value="100">100</option>
                    </select>
                    <div class="input-group-append">
                        <button type="button" class="btn btn-light" data-toggle="popover" data-placement="bottom" data-trigger="focus"
                                data-content="Amount of results maximum per pages.">
                            ?
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        export default {
            //Is loading
            loading: false,
            //Constants from assets/js/constants.js
            constants: {
                ARTIST_BELONGING: ARTIST_BELONGING,
                RECORDING_BELONGING: RECORDING_BELONGING,
                RELEASE_GROUP_BELONGING: RELEASE_GROUP_BELONGING,
                ALL_TYPE: ALL_TYPE,
                GROUP_TYPE: GROUP_TYPE,
                PERSON_TYPE: PERSON_TYPE,
                ORCHESTRA_TYPE: ORCHESTRA_TYPE,
                CHOIR_TYPE: CHOIR_TYPE,
                CHARACTER_TYPE: CHARACTER_TYPE,
                ALBUM_TYPE: ALBUM_TYPE,
                SINGLE_TYPE: SINGLE_TYPE,
                OTHER_TYPE: OTHER_TYPE,
                EP_TYPE: EP_TYPE,
                BROADCAST_TYPE: BROADCAST_TYPE,
                NEITHER_GENDER: NEITHER_GENDER,
                MALE_GENDER: MALE_GENDER,
                FEMALE_GENDER: FEMALE_GENDER
            },
            //Current type
            type: ALL_TYPE,
            //Riot function when mounted
            onMounted(){
                $(function () {
                    $("[data-toggle='popover']").popover({
                        trigger: 'focus'
                    });
                });
            },
            //On type changed
            onTypeChange(e) {
                this.type = e.target.value;
                this.update();
            },
            onFiltersShowChange(e) {
                this.show = !this.show;
                this.update();
            }
        }
    </script>
</searchfilters>